#!/bin/bash # just for automatic syntactic coloration purpose

# cache related utilities
#
# The reasoning behind this utility is that: relying on a sql thing is... a bad idea.
# I want to cache curl queries as much as possible to avoid getting black-listed / improve response time
#
# The cache format is pretty simple, with fast get, fast add and suuuuupeeeeer slow delete.

const_cache_keys_file_suffix=".keys"
const_cache_data_file_suffix=".data"
const_cache_lock_file_suffix=".lock"


conf_cache_compressor=gzip
has lzma && conf_cache_compressor=lzma
has xz && conf_cache_compressor=xz

cmdcheck $conf_cache_compressor # a compressor must be present
debug_log "auto-detected cache compressor: $conf_cache_compressor"

conf_cache_checksum_tool=sha1sum
has md5sum && conf_cache_checksum_tool=md5sum
has sha1sum && conf_cache_checksum_tool=sha1sum
has sha512sum && conf_cache_checksum_tool=sha512sum

cmdcheck $conf_cache_checksum_tool # a checksum tool must be present
debug_log "auto-detected cache checksum tool: $conf_cache_checksum_tool"


function cache_init # cache_base_file
{
    local cache="$1"
    touch "$cache$const_cache_keys_file_suffix"
    touch "$cache$const_cache_data_file_suffix"
    touch "$cache$const_cache_lock_file_suffix"
}

function cache_clear # cache_base_file
{
    local cache="$1"
    debug_log "cache clear: [$cache]"
    : >"$cache$const_cache_keys_file_suffix"
    : >"$cache$const_cache_data_file_suffix"
    : >"$cache$const_cache_lock_file_suffix"
}

# retrieve the content of the cache (stdout), return 1 if the cache does not contains anything
function cache_get # cache_base_file, key
{
    #cache_clear $1
    local cache="$1"
    local cache_keys="$cache$const_cache_keys_file_suffix"
    local cache_data="$cache$const_cache_data_file_suffix"

    local key="$( <<<"$2" $conf_cache_checksum_tool)"

    (
        flock -s 9 # shared lock as we only read

        local entry="$( grep -F "$key" "$cache_keys")"
        [ -z "$entry" ] && return 1


        local start_offset="$( <<<"$entry" cut -d- -f2)"
        local data_size="$( <<<"$entry" cut -d- -f3)"

        debug_log "cache hit: [$cache : ${key:0:6}..]: data-size: $data_size"

        # fast cache read + uncompress:
        dd skip=$start_offset count=$data_size if="$cache_data" bs=1 status=none | $conf_cache_compressor -d
    ) 9>"$cache$const_cache_lock_file_suffix"
}

function cache_contains # cache_base_file, key
{
    local cache="$1"
    local cache_keys="$cache$const_cache_keys_file_suffix"
    local cache_data="$cache$const_cache_data_file_suffix"

    local key="$( <<<"$2" $conf_cache_checksum_tool)"

    (
        flock -s 9 # shared lock as we only read

        grep -F "$key" "$cache_keys" 1>/dev/null
    ) 9>"$cache$const_cache_lock_file_suffix"
}

# write content to the cache. read from stdin, print back the content to stdout
# (so the command can be used this way: `command1 | cache_put file key | command2`)
# WARNING: IT ASSUMES THE CACHE DOES NOT CONTAINS THE KEY
function cache_put # cache_base_file, key
{
    local cache="$1"
    local cache_keys="$cache$const_cache_keys_file_suffix"
    local cache_data="$cache$const_cache_data_file_suffix"
    cache_trunc "$cache"

    local key="$( <<<"$2" $conf_cache_checksum_tool | tr -d '\n')"
    (
        flock -x 9 # exclusive lock.

        # Debug. Avoid bad stuff from happening in case someone is doing bad stuff
        [ ! -z "$( grep -F "$key" "$cache_keys")" ] && { debug_log "cache put: [$cache]: already contains an entry for [${key:0:6}..]. This requires investigation." ; cat ; return 0 ; }

        local cache_size="$(du -b "$cache_data" | cut -f1)"

        # the |cat is necessary so that bash wait for the child subshell (not waiting for the compression would be problematic)
        tee >($conf_cache_compressor -c -9 >>"$cache_data") | cat

        local new_cache_size="$(du -b "$cache_data" | cut -f1)"
        local data_size="$((new_cache_size - cache_size))"

        # once everything is done, write the entry
        # (so we never end-up with an invalid key file. we may waste disk space but not have a corrupted stuff)
        echo "$key$cache_size-$data_size" >> "$cache_keys"

        debug_log "cache put: [$cache : ${key:0:6}..]: data-size: $data_size"
        debug_log "cache put: [$cache] cache-size: $((new_cache_size/1024))kib for $(wc -l <"$cache_keys") entries"

    ) 9>"$cache$const_cache_lock_file_suffix"
}

function cache_trunc # cache_base_file, [max_entry_count:1000], [margin:250]
{
    local cache="$1"
    local cache_keys="$cache$const_cache_keys_file_suffix"
    local cache_data="$cache$const_cache_data_file_suffix"

    local max_entry_count=${2:-1000}
    local margin=${3:-250}

    (
        flock -x 9 # exclusive lock as we might want to write and I don't want to bother having lock stuff in here

        local key_count="$(wc -l <"$cache_keys")"
        (( key_count <= (max_entry_count + margin) )) && return 0

        entries_to_rm=$((key_count - max_entry_count))

        debug_log "cache trunc: [$cache]: removing $entries_to_rm entries..."

        # trim the keys: (tail -n+[...] is 1 indexed hence the +1)
        tail -n+$((entries_to_rm+1)) "$cache_keys" > "$cache_keys.tmp"

        local data_shift="$(head -n1 "$cache_keys.tmp" | cut -d- -f2 )"

        rm -f "$cache_data.tmp"
        # launch dd in the background...
        dd skip=$data_shift if="$cache_data" of="$cache_data.tmp" bs=1 status=none &
        local dd_pid=$!

        # do the gruesome work of shiftig the base address
        local line=
        while read -r line
        do
            local data_key="$( <<<"$line" cut -d- -f1 )"
            local data_offset="$(($( <<<"$line" cut -d- -f2 ) - data_shift))"
            local data_size="$( <<<"$line" cut -d- -f3 )"
            echo "$data_key-$data_offset-$data_size"
        done <"$cache_keys.tmp" >"$cache_keys.tmp2"

        # wait for dd to end, if not already done
        wait $dd_pid

        # move the new cache in place:
        rm -f "$cache_keys.tmp"
        mv -f "$cache_keys.tmp2" "$cache_keys"
        mv -f "$cache_data.tmp" "$cache_data"
        debug_log "cache trunc: [$cache]: freed $data_shift bytes"
        debug_log "cache trunc: [$cache] cache-size: $((new_cache_size/1024))kib for $(wc -l <"$cache_keys") entries"
    ) 9>"$cache$const_cache_lock_file_suffix"
}

