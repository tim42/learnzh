#!/bin/bash # just for automatic syntactic coloration purpose

# a set of generic utilities

# replace uniq, but without the requirement of having to sort stuff
function unsorted_uniq
{
    # may consume a bit too much memory...
    awk '!x[$0]++'
}

function trim
{
    awk '{$1=$1};1' | awk NF
}


const_color_red="$(tput setaf 1)"
const_color_green="$(tput setaf 2)"
const_color_blue="$(tput setaf 4)"
const_color_cyan="$(tput setaf 6)"
const_format_bold="$(tput bold)"
const_format_italic="$(tput sitm)"
const_format_reset="$(tput sgr0)"

# note: -n does nothing
function echo_error
{
    echo -n "${const_color_red}${const_format_bold}"
    echo -n "$@"
    echo "${const_format_reset}"
}

function echo_entry
{
    echo -n "${const_color_blue}"
    echo -n "$@"
    echo "${const_format_reset}"
}

function echo_success
{
    echo -n "${const_color_green}"
    echo -n "$@"
    echo "${const_format_reset}"
}

function echo_notice
{
    echo -n "${const_format_bold}"
    echo -n "$@"
    echo "${const_format_reset}"
}

# for debug purposes
function do_clear
{
    (( VERBOSE >= 1 )) || clear
}

function trim_content
{
    sed -e 's/{{.*}}//g' # remove sound stuff
}

# pipeline translation from pinyin to zhuyin (built for the cedict pinyin format)
function pinyin_to_zhuyin
{
    local pinyin="$1"

    # inspired by: https://github.com/logicmason/pinyin-to-zhuyin/blob/master/pinyin-to-zhuyin.js
    # Which is under MIT license.
    # The table is passed through:
    #   search: "([^"]*)"[: ]+"([a-zü]*)"[, 0-9{}:\n]*
    #   replace: ["\2"]="\1"\n

    local subst=()

    # it's a bit ugly, but yeah. What did you expect ?
    local table=(
        "yao|ㄧㄠ"
        "you|ㄧㄡ"
        "yue|ㄩㄝ"
        "yong|ㄩㄥ"
        "yuan|ㄩㄢ"
        "ying|ㄧㄥ"
        "yun|ㄩㄣ"
        "yang|ㄧㄤ"
        "yan|ㄧㄢ"
        "yin|ㄧㄣ"
        "wei|ㄨㄟ"
        "wang|ㄨㄤ"
        "wan|ㄨㄢ"
        "weng|ㄨㄥ"
        "wen|ㄨㄣ"
        "wai|ㄨㄞ"

        "iang|ㄧㄤ"
        "ing|ㄧㄥ"

        "iai|ㄧㄞ"
        "iao|ㄧㄠ"
        "iu|ㄧㄡ"
        "ian|ㄧㄢ"
        "in|ㄧㄣ"

        "uai|ㄨㄞ"
        "uang|ㄨㄤ"
        "uan|ㄨㄢ"
        "ua|ㄨㄚ"
        "uo|ㄨㄛ"
        "ui|ㄨㄟ"
        "un|ㄨㄣ"
        "u:n|ㄩㄣ"
        "iong|ㄩㄥ"
        "ong|ㄨㄥ"

        "uan|ㄩㄢ"
        "un|ㄩㄣ"
        "ong|ㄩㄥ"
        "ue|ㄩㄝ"

        "zhi|ㄓ"
        "chi|ㄔ"
        "shi|ㄕ"
        "ri|ㄖ"
        "ang|ㄤ"
        "eng|ㄥ"
        "ai|ㄞ"
        "ei|ㄟ"
        "ao|ㄠ"
        "ou|ㄡ"
        "er|ㄦ"

        "an|ㄢ"
        "en|ㄣ"
        "wa|ㄨㄚ"
        "wo|ㄨㄛ"
        "wu|ㄨ"
        "ya|ㄧㄚ"
        "ye|ㄧㄝ"
        "yu|ㄩ"

        "ia|ㄧㄚ"
        "io|ㄧㄛ"
        "ie|ㄧㄝ"

        "zh|ㄓ"
        "ch|ㄔ"
        "sh|ㄕ"
        "zi|ㄗ"
        "ci|ㄘ"
        "si|ㄙ"
        "r5|ㄦ˙"
        "r|ㄖ"
        "yi|ㄧ"
        "u:e|ㄩㄝ"

        "b|ㄅ"
        "p|ㄆ"
        "m|ㄇ"
        "f|ㄈ"
        "d|ㄉ"
        "t|ㄊ"
        "n|ㄋ"
        "l|ㄌ"
        "g|ㄍ"
        "k|ㄎ"
        "h|ㄏ"
        "j|ㄐ"
        "q|ㄑ"
        "x|ㄒ"
        "z|ㄗ"
        "c|ㄘ"
        "s|ㄙ"
        "i|ㄧ"
        "u:|ㄩ"
        "u|ㄨ"
        "a|ㄚ"
        "o|ㄛ"
        "e|ㄜ"
        "v|ㄩ"

        "1|"
        "5|˙"
        "2|ˊ"
        "3|ˇ"
        "4|ˋ"
    )

    # build the massive perl substr:
    local str=
    for str in "${table[@]}"
    do
        key="$(cut -d'|' -f1<<<"$str")"
        value="$(cut -d'|' -f2 <<<"$str")"
        subst+=(-e"s/$key/$value/g;")
    done
    debug_log "${subst[@]}"
    # the two first subst are because the fr-to-zh dict is kinda weird for ㄦ (it indicates them as 'r' not 'r5')
    # so we normalize the input first then do the substitutions
    perl -p -e 's/ r / r5 /g;' -e 's/ r$/ r5/g;'   "${subst[@]}"   -e 's/(ㄐ|ㄑ|ㄒ)ㄨ/\1ㄩ/g;'
}

help_conf_change_keyboard_layout="Whether fcitx5 will be asked to change the keyboard layout"
conf_change_keyboard_layout=false
boolean_conf_change_keyboard_layout=

function switch_keyboard_layout_to_ㄅㄆㄇㄈ
{
    $conf_change_keyboard_layout || return
    fcitx5-remote -o
}
function switch_keyboard_layout_to_default
{
    $conf_change_keyboard_layout || return
    fcitx5-remote -c
}

function y_or_n # question
{
    local answer=
    while [ "$answer" != 'y' ] && [ "$answer" != 'n' ]
    do
      read -p "$1 [y/n]: " -r answer
      # mappings for zhuyin keyboard
      [ "$answer" = 'ㄗ' ] && answer='y'
      [ "$answer" = 'ㄙ' ] && answer='n'
    done
    echo $answer
}

function press_enter_to_continue
{
  local __scratch=
  read -p "[press enter to continue]" -r __scratch
}


function format_descriptions # descr
{
    local descriptions="$1"
    awk '$0=" - "$0' <<<"$descriptions"
}

function format_word_header # word, zhuyin
{
    local word="$1"
    local zhuyin="$2"
    echo -n "${const_format_reset}${const_color_blue}$word${const_format_reset} [[ ${const_color_cyan}$zhuyin${const_format_reset} ]]"
}

function format_word_info # word, [extended-info:false]
{
    local word="$1"
    local ex_info="${2:-false}"
    [ "$ex_info" != 'true' ] && ex_info=false

    [ -z "$word" ] && return

    local line=
    db_get_word_info "$word" | while read -r line
    do
        local zhuyin="$(db_get_zhuyin_from_input <<<"$line")"
        local descriptions="$(db_get_descriptions_from_input <<<"$line")"
        local descr_line_count=$(wc -l <<<"$descriptions")
        format_word_header "$word" "$zhuyin"
        (( descr_line_count <= 1 )) &&
            ( echo -n " : " ; echo "$descriptions" ) ||
            ( echo -e " :\n$(format_descriptions "$descriptions")" )
    done

    # query wiktionary
    local wiktionary_data="$(wiktionary_get_word_data "$word")"
    local wdescr="$(grep -E "^$1\|" <<<"$wiktionary_data" | cut -d'|' -f${const_db_descr}-   | tr '_' ' ' | awk NF )"
    local wnote="$(grep -E "^@$1\|" <<<"$wiktionary_data" | cut -d'|' -f${const_db_descr}-   | tr '_' ' ' | awk NF )"
    local wex="$(grep -E "^#$1\|" <<<"$wiktionary_data" | cut -d'|' -f${const_db_descr}- | tr -d '^' | tr '_' ' ' | perl -p -e 's/\{.*?\}//g;' )"

    ( [ ! -z "$wdescr" ]  || [ ! -z "$wnote" ] ) && echo '  --------------- '

    $ex_info && [ ! -z "$wdescr" ] && wiktionary_format_description "$wdescr"
    [ ! -z "$wnote" ] && wiktionary_format_description "$wnote"

    $ex_info && [ ! -z "$wex" ] &&
    {
        echo '  --------------- '
        wiktionary_format_example <<<"$wex"
    }
}

function json_word_info # word
{
    local word="$1"

    [ -z "$word" ] && return

    echo '{'
    echo '"entries":['
    local line=
    local i=0
    db_get_word_info "$word" | while read -r line
    do
        local zhuyin="$(db_get_zhuyin_from_input <<<"$line")"
        local descriptions="$(db_get_descriptions_from_input <<<"$line")"
        local descr_line_count=$(wc -l <<<"$descriptions")
        ((i > 0)) && echo ','
        let ++i
        echo -n "{\"word\":$(json_str "$word"),\"zhuyin\":$(json_str "$zhuyin"),\"description\":$(json_str "$descriptions")}"
    done
    echo ']'
    echo '}'
}

function json_str # str
{
  jq -Rs . <<<"$1"
}

# single-line word info
function format_short_word_info # word, [max-column:120]
{
    local word="$1"
    local max_line_length=${2:-120}

    local db_line=
    db_get_word_info "$word" | while read -r db_line
    do
        local zhuyin="$(db_get_zhuyin_from_input <<<"$db_line")"
        local descriptions="$(db_get_descriptions_from_input <<<"$db_line")"

        local current_line="$(format_word_header "$word" "$zhuyin") :"
        local initial_affectation=true
        local line=
        while read -u3 -r line
        do
            (( ${#current_line} + ${#line} >= max_line_length )) &&
            {
                echo "$current_line"
                current_line="    $line"
                initial_affectation=false
            } ||
            {
                $initial_affectation && current_line="$current_line $line"
                $initial_affectation || current_line="$current_line / $line"
                initial_affectation=false
            }
        done 3<<<"$descriptions"
        echo "$current_line"
    done
}

function print_word_characters_info # word
{
    local word="$1"
    local i=
    for (( i=0; i<${#word}; i++ ))
    do
        local character="${word:$i:1}"
        format_short_word_info "$character"
    done

}

