

function _log_sentence_count
{
    local sentence_count=$1
    local line=
    local i=0
    while read -r line
    do
        echo -ne " --  [progress: $i | $(( i * 100 / sentence_count))%]\r"
        let ++i
    done
}

function _get_sentences # min-pct-know-words count
{
    local matching_pct=$1
    local sentence_count=$2

    local line=
    local found=0
    local read_count=0
    while read -r line
    do
        let read_count++
        echo -ne " --  [progress: $(( read_count * 100 / sentence_count))%]\r" 1>&5

        (( read_count % (12 * 3) == 0 )) && wait # avoid spawning too many processes. This is not a job pool in any way, shape or form. It's just faster.
        st_check_sentence "$line" "$matching_pct" & #& let found++
    done
    wait
}

function ext_cmd_test_sentence
{
    is_tts_enabled || die 3 'TTS support is required for this to work'

    #max: 18897
    local sentence_count=7000
    local matching_pct=70

    log "selecting sentences with at least $matching_pct% known words (in the first $sentence_count sentences)"
    local matching_sentences="$(st_read_file 1 $sentence_count | _get_sentences $matching_pct $sentence_count)" 5>&1
    log "found $(wc -l <<<"$matching_sentences") compatible sentences"
    sleep 1

    while true
    do
        local sentence=
        while read -u4 -r sentence
        do
            debug_log "sentence: $sentence"

            ex_learn_sentence "$sentence"

            echo 'press enter to continue'
            local _scratch=
            read -r _scratch
        done 4< <(shuf <<<"$matching_sentences" | head -n"$cmd_opt_test_sentence_round_size")
    done
}

